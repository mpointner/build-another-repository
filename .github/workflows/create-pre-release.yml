name: Prerelease

on:
  workflow_call: { }
  workflow_dispatch: { }

permissions:
  contents: write

jobs:
  user-administration:
    uses: ./.github/workflows/workflow.yml
    secrets: inherit
    with:
      prerelease: true


  release:
    needs: [ user-administration ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Another Repository
        uses: actions/checkout@v3
        with:
          repository: mpointner/user-administration
          ref: main
          token: ${{ secrets.PAT_USER_ADMINISTRATION }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: rel
          merge-multiple: true

      - name: Determine new patch version
        id: increment_tag
        run: |
          # Fetch all tags to ensure the latest are available
          git fetch --tags
          
          # Get the most recent release tag
          LAST_RELEASE_TAG=$(git tag --sort=-v:refname | grep "^v" | head -n 1)
          
          # Parse the release tag into major, minor and patch
          if [[ -z "$LAST_RELEASE_TAG" ]]; then
            echo "No tags found. Initializing new tag."
            NEW_TAG="pre1.0.0" # Default prefix and version
          else
            LAST_RELEASE_VERSION=${LAST_RELEASE_TAG#v}
            MAJOR=$(echo $LAST_RELEASE_VERSION | cut -d. -f1)
            MINOR=$(echo $LAST_RELEASE_VERSION | cut -d. -f2)
            NEW_MINOR=$((MINOR + 1))
          
            # Get the most recent prerelease tag
            LAST_PRERELEASE_TAG=$(git tag --sort=-v:refname | grep "^pre" | head -n 1)
          
            # 
            if [[ -z "$LAST_PRERELEASE_TAG" ]]; then
              NEW_PATCH=0
            else
              LAST_PRERELEASE_VERSION=${LAST_PRERELEASE_TAG#pre}
              PATCH=$(echo $LAST_RELEASE_VERSION | cut -d. -f3) # Extract patch version
              NEW_PATCH=$((PATCH + 1))
            fi
          
            NEW_TAG="pre${MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          fi
          
          # Output the new tag
          echo "::set-output name=new_tag::$NEW_TAG"
          echo "::set-output name=LAST_RELEASE_TAG::$LAST_RELEASE_TAG"

      - name: Tag Release
        run: |
          git tag ${{ steps.increment_tag.outputs.new_tag }}
          git push origin ${{ steps.increment_tag.outputs.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_USER_ADMINISTRATION }}

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          fromTag: ${{ steps.increment_tag.outputs.LAST_RELEASE_TAG }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create pre-release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          tag_name: ${{ steps.increment_tag.outputs.new_tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            rel/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
